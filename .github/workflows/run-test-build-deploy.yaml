name: build-deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - bugfix
          - hotfix

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          architecture: x64
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Update changelog
        run: dart update_changelog.dart

      - name: Build package
        run: flutter pub publish --dry-run

  update_version_and_publish:
    needs: test_and_build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          architecture: x64
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git remote set-url origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

      - name: Update version and changelog
        run: |
          # Get current version from pubspec.yaml
          CURRENT_VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //')
          
          # Split version into parts
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Calculate new version based on release type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            case "${{ github.event.inputs.release_type }}" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
                ;;
              "patch"|"bugfix"|"hotfix")
                NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
                ;;
            esac
          else
            # Default behavior for push to main: increment patch
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
          fi
          
          # Update changelog
          dart update_changelog.dart $NEW_VERSION
          
          # Commit changes
          git add pubspec.yaml CHANGELOG.md lib/utils/sdk_version.dart
          git commit -m "chore: bump version to $NEW_VERSION"
          
          # Push changes
          git push origin main
